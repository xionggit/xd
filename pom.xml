<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.xd</groupId>
  <artifactId>xd</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>xd</name>
  <url>http://maven.apache.org</url>
  
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.0.6.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <properties>
      <!--  依赖版本  -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      <java.version>1.8</java.version>
      <spring-cloud.version>Finchley.SR2</spring-cloud.version>
      <spring-boot.version>${parent.version}</spring-boot.version>
      <mybatis.spring.version>1.3.2</mybatis.spring.version>
      <pagehelper.version>5.1.2</pagehelper.version>
      <druid.version>1.1.12</druid.version>
      <swagger2.version>2.9.2</swagger2.version>
      <fastjson.version>1.2.52</fastjson.version>
      <java-jwt.version>3.4.1</java-jwt.version>
      <httpclient.version>4.5.6</httpclient.version>
      <lombok.version>1.18.4</lombok.version>
      <javacv-platform.version>1.4</javacv-platform.version>
      <commons-io.version>2.6</commons-io.version>
      <zuul-core.version>2.1.3</zuul-core.version>
      <guava.version>27.0-jre</guava.version>
  </properties>

  <dependencyManagement>
    <!-- 以下为子项目需要手动引入的jar包 -->
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${mybatis.spring.version}</version>
                <scope>test</scope>
                <!-- 
                * compile，缺省值，适用于所有阶段，会随着项目一起发布。 
				* provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。 
				* runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 
				* test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 
				* system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。 
				-->
            </dependency>
            
            <!--Mybatis-->
            
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>
            <!-- 连接池 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            
            <!-- swagger -->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${swagger2.version}</version>
            </dependency>

            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${swagger2.version}</version>
            </dependency>
            
            <!-- other start -->
            <dependency>
                 <groupId>com.alibaba</groupId>
                 <artifactId>fastjson</artifactId>
                 <version>${fastjson.version}</version>
            </dependency>
            
			<dependency>
			    <groupId>com.google.guava</groupId>
			    <artifactId>guava</artifactId>
			    <version>${guava.version}</version>
			</dependency>
            
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>${java-jwt.version}</version>
            </dependency>
             
			<dependency>
			    <groupId>org.apache.httpcomponents</groupId>
			    <artifactId>httpclient</artifactId>
			    <version>${httpclient.version}</version>
			</dependency>
            <!-- commons-io是一款处理io流的工具，封装了很多处理io流和文件的方法，可以大大简化我们处理io流和操作文件的代码。
                            从common-io的官方使用文档可以看出，它主要分为工具类、尾端类、行迭代器、文件过滤器、文件比较器和扩展流。 -->
            <dependency>
              <groupId>commons-io</groupId>
              <artifactId>commons-io</artifactId>
              <version>${commons-io.version}</version>
            </dependency>
            <!-- JavaCV使用来自计算机视觉领域(OpenCV, FFmpeg, libdc1394, PGR FlyCapture, OpenKinect, librealsense, 
            CL PS3 Eye Driver, videoInput, ARToolKitPlus, flandmark, Leptonica, and Tesseract)领域的研究人员常用库的JavaCPP预设的封装。
                            提供实用程序类，使其功能更易于在Java平台上使用，包括Android。 -->
            <dependency>
                <groupId>org.bytedeco</groupId>
                <artifactId>javacv-platform</artifactId>
                <version>${javacv-platform.version}</version>
            </dependency>
            <!-- other end -->

            <!-- cloud -->
            <dependency>
			    <groupId>com.netflix.zuul</groupId>
			    <artifactId>zuul-core</artifactId>
			    <version>${zuul-core.version}</version>
			</dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            
        </dependencies>
    </dependencyManagement>
    <!-- 以下为子项目需要自动继承的jar包 -->
    <dependencies>
        <!-- Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。
             Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法。
                            在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。
                            这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。
             Lombok的使用跟引用jar包一样，可以在官网（https://projectlombok.org/download）下载jar包，也可以使用maven添加依赖： --> 
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- 测试devtools 热部署 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>
        <!-- 系统注册与监测服务 -->
        <dependency>  
            <groupId>org.springframework.cloud</groupId>  
            <!-- <artifactId>spring-cloud-starter-consul-all</artifactId> -->
            <artifactId>spring-cloud-starter-consul-discovery</artifactId>  
        </dependency>
        <!-- 系统配置管理中心 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <!-- feign 声明式服务调用框架 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        
    </dependencies>
    <!-- 子项目需要自动继承的jar包   end -->
    
    <build>
        <plugins>
            <plugin>
            <!-- surefire 插件用来在maven构建生命周期的test phase执行一个应用的单元测试。它会产生两种不同形式
                的测试结果报告：
                1）.纯文本
                2）.xml文件格式的
                默认情况下，这些文件生成在工程的${basedir}/target/surefire-reports，目录下（basedir指的是pom文件所在的目录）。
                它可以运行任何testNG,Junit,pojo写的单元测试-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            
            <plugin>    
                 <groupId>org.apache.maven.plugins</groupId>    
                 <artifactId>maven-resources-plugin</artifactId>    
                 <configuration>    
                     <encoding>UTF-8</encoding>    
                 </configuration>    
             </plugin>    
  
             <plugin>    
                 <groupId>org.apache.maven.plugins</groupId>    
                 <artifactId>maven-compiler-plugin</artifactId>    
                 <configuration>    
                     <encoding>UTF-8</encoding>  
                     <source>1.8</source>  
                     <target>1.8</target>    
                 </configuration>    
             </plugin>
             
             <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <configuration>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    
    <repositories>
        <repository>
            <id>oss</id>
            <name>oss</name>
            <url>https://oss.sonatype.org/content/groups/public</url>
        </repository>
        
        <repository>
           <id>alimaven</id>
           <name>aliyun maven</name>
           <url>http://maven.aliyun.com/nexus/content/repositories/public/</url>
           <layout>default</layout>
         </repository>
         <repository>
           <id>resp</id>
           <name>Spring Milestones Repository</name>
           <url>http://repo.spring.io/milestone/</url>
           <layout>default</layout>
         </repository>
    </repositories>
    
    <pluginRepositories>
        <pluginRepository>
          <id>alimaven</id>
          <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        </pluginRepository>
        
        <pluginRepository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </pluginRepository>
    </pluginRepositories>
    <modules>
    	<module>xd-common</module>
    	<module>xd-cloud-frameword</module>
    	<module>xd-web-parent</module>
    </modules>
    
</project>
